@page "/animaldetail";
@page "/animaldetail/{Id:int}"

@using model = AnimalShelter.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Runtime.CompilerServices

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavManager 

<h3>AnimalDetail</h3>

<EditForm Model="@Animal" OnValidSubmit="HandleValidSubmit">
    
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" @bind-Value="Animal.Name" class="form-control" />
        <ValidationMessage For="@(() => Animal.Name)" />
    </div>
    
    <div class="form-group">
        <label for="dateOfBirth">Date of Birth</label>
        <InputDate id="dateOfBirth" @bind-Value="Animal.DateOfBirth" class="form-control" />
        <ValidationMessage For="@(() => Animal.DateOfBirth)" />
    </div>
    <div class="form-group">
        <label for="estimatedAge">Estimated age</label>
        <InputNumber id="estimatedAge" @bind-Value="Animal.EstimatedAge" class="form-control" />
        <ValidationMessage For="@(() => Animal.EstimatedAge)" />
    </div>

    <div class="form-group">
        <label for="pictureUrl">Picture</label>
        <InputText id="pictureUrl" @bind-Value="Animal.PictureUrl" class="form-control" />
        <ValidationMessage For="@(() => Animal.PictureUrl)" />
    </div>
    
    <div class="form-group">
        <label for="kindofanimal">Kind of animal</label>
        <InputSelect @bind-Value="Animal.AnimalKind" class="form-control">
            @foreach (var kind in Enum.GetValues(typeof(model.AnimalKind)))
            {
                <option value="@kind">@kind</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="gender">Gender</label>
        <InputSelect id="gender" @bind-Value="Animal.Gender" class="form-control">
            @foreach (var gender in Enum.GetValues(typeof(model.Gender)))
            {
                <option value="@gender">@gender</option>
            }
        </InputSelect>
    </div>

    

    <button type="submit" class="btn btn-primary">Submit</button>
    <button type="button" class="btn btn-secondary" @onclick="MoveToOverview">Back to overview</button>

</EditForm>


@code {

    [Parameter]
    public int? Id { get; set; }


    private model.Animal Animal { get; set; } = new model.Animal();


    private async Task HandleValidSubmit()
    {

        if (Id.HasValue)
        {
            await UpdateAnimal();
        }
        else
        {
            await CreateAnimal();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id.HasValue)
        {
            try
            {
                Animal = await Http.GetFromJsonAsync<model.Animal>($"api/animal/{Id}");

                Console.WriteLine(Animal.Name);
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
    }

    private void MoveToOverview()
    {
        NavManager.NavigateTo("/animaloverview");
    }

    private async Task UpdateAnimal()
    {

        try
        {
            var response = await Http.PutAsJsonAsync<model.Animal>($"api/Animal/{Animal.Id}", Animal);

            MoveToOverview();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task CreateAnimal()
    {
        try
        {
            var response = await Http.PostAsJsonAsync<model.Animal>("api/Animal", Animal);

            MoveToOverview();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }




}
